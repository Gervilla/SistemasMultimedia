package sm.pgp.biblioteca.Lienzos;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Shape;
import java.util.ArrayList;
import sm.pgp.biblioteca.Figuras.Tipo;

/**
 * Clase primitiva del lienzo.
 * Usar Lienzo2D o LienzoImagen2D.
 * @author gervi
 */
public class Lienzo extends javax.swing.JPanel {

    /**
     * Creates new form Lienzo
     */
    private Color color;
    private Point p1 = new Point(-10,-10);
    private Point p2 = new Point(0,0);
    private Tipo figura = Tipo.TRAZO;
    private boolean relleno;
    ArrayList<Shape> vShape = new ArrayList();
    
    public Lienzo() {
        initComponents();
    }
    
    @Override
    public void paint(Graphics g){
        super.paint(g);
        g.setColor(color);
        
        int w = p2.x-p1.x;
        int h = p2.y-p1.y;
        
        switch (figura){
            case TRAZO:
                g.fillOval(p1.x-10,p1.y-10,20,20);
                break;
                
            case LINEA:
                g.drawLine(p1.x,p1.y,p2.x,p2.y);
                break;
                
            case RECTANGULO:
                if (relleno)
                    g.fillRect(p1.x,p1.y,w,h);
                else
                    g.drawRect(p1.x,p1.y,w,h);
                break;
                
            case OVALO:
                if (relleno)
                    g.fillOval(p1.x,p1.y,w,h);
                else
                    g.drawOval(p1.x,p1.y,w,h);
                break;
        }
    }
    public void setColor(Color color){
        this.color = color;
    }
    public Color getColor(){
        return color;
    }

    public void setRelleno(boolean relleno) {
        this.relleno = relleno;
    }

    public void setFigura(Tipo figura) {
        this.figura = figura;
    }
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        p1 = evt.getPoint();
    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        p2 = evt.getPoint();
        this.repaint();
    }//GEN-LAST:event_formMouseReleased

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        p2 = evt.getPoint();
        this.repaint();
    }//GEN-LAST:event_formMouseDragged

    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
